Export from a database
**********************

Formatters are intended to output table data. Supported formatters are:

TextFormatter
    Outputs tables in plain text format with fixed-width columns.

CvsFormatter
    Outputs tables in CSV format.

XmlFormatter
    Outputs tables in XML format

XlsxFormatter
    Outputs tables in EXCEL xlsx format

All formatters may be used in the following ways:

**Example 1: function call**

.. code:: python

        from lwetl import Jdbc, TextFormatter

        jdbc = Jdbc('scott')

        sql = 'SELECT * FROM MY_TABLE ORDER BY ID'
        fmt = TextFormatter()
        fmt(jdbc=jdbc, sql=sql)

**Example 2: with statement**

.. code:: python

        from lwetl import Jdbc, TextFormatter

        jdbc = Jdbc('scott')

        cur = jdbc.execute('SELECT * FROM MY_TABLE ORDER BY ID',cursor = None)

        formatter = TextFormatter()
        with TextFormatter(cursor=cur) as fmt:
            fmt.header()
            for row in jdbc.get_data(cur):
                fmt.write(row)
            fmt.footer()


**Example 3: open/close**

.. code:: python

        from lwetl import Jdbc, TextFormatter

        jdbc = Jdbc('scott')

        cur = jdbc.execute('SELECT * FROM MY_TABLE ORDER BY ID',cursor = None)

        fmt = TextFormatter()
        fmt.open(cursor=cur)
        fmt.header()
        for row in jdbc.get_data(cur):
            fmt.write(row)
        fmt.footer()
        fmt.close()

Below onl the TextFormatter is described in detail. For the otherones only the differences are mentioned.


.. class:: TextFormatter():

    Outputs a table in plain text format with fixed-width columns.

    .. function:: __init__(*args, **kwargs):

        Instantiate. All arguments are optional.

        :arg Cursor cursor:

            cursor generated by :func:`jdbc.execute()`

        :arg (str,TextIOWrapper,StringIO) filename_or_stream:

            specifier of the output stream. May be a filename (string) or a stream object.

        :arg bool append:

            append the specified file, rather then creating a new one. Defaults to False.


        :arg int column_width:

            the width of each text column. (Only used in this class)


        .. code:: python

            from lwetl import TextFormatter

            fmt = TextFormatter(cursor=cursor, filename_or_stream='myoutput.txt', append=True)


    .. function:: __call__(*args, **kwargs):

        Write a table in a single statement, see Example1 above.

        :arg Jdbc jdbc:

            The Jdbc connection

        :arg str sql:

            The SQL to parse

        Also accepts all arguments of the :func:`__init__()` statement with the exception of the cursor.


    .. function:: open(*args, **kwargs)

        Opens the file or stream for writing. Takes the same arguments as the :func:`__init__()` statement.


    .. function:: close()

        Closes the output file or stream (if applicable)


    .. function:: format(row)

        Format the row of data.

        :arg (list,tuple) row:

            a row of data.

        :returns:
            a string.

    .. function:: header()

        Write the header (column names) to the specified file or stream.


    .. function:: write(row: list)

        Writes the output of :func:`format(row)` to the specified output stream.


    .. function:: header()

        Does nothing.


.. class:: CsvFormatter():

    Outputs a table in CSV format. The functionality is identical to the :class:`TextFormatter`

    .. function:: all fuctions

        :arg str separator:

            Specifies the CSV column separator. Defaults to ';'


.. class:: XmlFormatter():

    Outputs a table in XML format.  The functionality is identical to the :class:`TextFormatter`

    .. function:: all fuctions

        :arg str dialect:

            Specifies the XML dialect: 'excel', 'value', or 'plain'. Defaults to 'excel'

        :arg bool pretty_print:

            Output the xml in formatted mode, instead of compact. Defaults to False.


        :arg str sheet_name:

            Specifies the name of the worksheet. Defaults to 'Sheet1'


    .. function:: next_sheet(cursor, sheet_name=None)

            Initiates a new sheet with a new cursor.

            :arg Cursor cursor:

                cursor generated by :func:`jdbc.execute()`

            :arg str sheet_name:

                name of the work sheet. Uses a counter like 'SheetN' if not specified.

    **Example:**

    .. code:: python

            from lwetl import Jdbc, XmlFormatter

            jdbc = Jdbc('scott')
            fmt = None
            for table in ['MY_TABLE1', 'MY_TABLE_2']:
                cur = jdbc.execute('SELECT * from {0} ORDER BY ID'.format(table), cursor=None)
                if fmt is None:
                    fmt = XmlFormatter()
                    fmt.open(cursor='cur')
                else:
                    fmt.next_sheet(cur)

                fmt.header()
                for row in jdbc.get_data(cur):
                    fmt.write(row)
            fmt.close()


.. class:: XlsxFormatter(jdbc: Jdbc):

    Outputs a table in a Excel 2007+ file. The functionality is identical to the :class:`XmlFormatter`
    but ``dialect`` and ``pretty_print`` are not supported.

    .. warning::

        Stream output is not supported. Only valid file-names are accepted for the argument ``filename_or_stream``.


